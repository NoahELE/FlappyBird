@startuml
class ShadowFlap {
	- WIDTH: int
	- HEIGHT: int
	- LEVEL0_MAX_SCORE: int
	- LEVEL1_MAX_SCORE: int
	- background: Image
	- font: Font
	- pipes: Queue<Pipe>
	- bird: Bird
	- win: boolean
	- lose: boolean
	- levelUp: boolean
	- levelUpCounter: int
	- score: int
	- pipeSpawningCounter: int
	- started: boolean
	- birdPassPipe: boolean

	- update()
	+ main(args: String[]) {static}
}

abstract class Pipe {
    - GAP: int {static}
    - stepSize: int {static}
	- image: Image
	- upright: boolean
	- type: int
	- x: double
	- y: double
	- passedByBird: boolean
	- collideWithBird: boolean

	+ getRandomPos(): double {static}
	+ draw()
	+ move()
	+ isOutOfBound(): boolean
}

class PlasticPipe extends Pipe {}

class SteelPipe extends Pipe {
	- flameCounter: int

	+ shootFlame()
}

class Flame {
	- image: Image
	- speed: double
	- upward: boolean

	- move()
	- isOutofBorder(): boolean
}

class Bird {
	- birdWingUp: Image
	- birdWingdown: Image
	- image: Image
	- x: double
	- y: double
	- image: Image
	- wingcounter: int
	- speed: double
	- lives: int

	+ draw()
	+ fall()
	+ fly()
	+ move()
	+ isOutOfBound(): boolean
	+ collideWith(pipe: Pipe): boolean
	+ loseLife()
}

abstract class Weapon {
	- x: double
	- y: double
	- MOVE_SPEED: double {static}
	- SHOOT_SPEED: double {static}
	- image: Image

	+ isOutOfBorder(): boolean
	+ move()
	+ shoot()
}

class Rock extends Weapon {
	+ RANGE: double {static}
}

class Bomb extends Weapon {
	+ RANGE: double {static}
}

Pipe "2" <-- "1" ShadowFlap
Bird "1" <-- "1" ShadowFlap
Weapon "n" <-- "1" ShadowFlap
Flame "0..n" <-- "1" ShadowFlap
@enduml
